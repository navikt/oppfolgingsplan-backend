server:
  port: 8080
  shutdown: graceful

spring:
  profiles:
    active: remote
  main.banner-mode: 'off'
  flyway:
    enabled: true
    locations:
      - "classpath:db/migration"
      - "classpath:db/migration/common"
  datasource:
    url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}"
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 5
  data:
    redis:
      url: ${REDIS_URI_OPPFOLGINGSPLAN:}
      username: ${REDIS_USERNAME_OPPFOLGINGSPLAN:}
      password: ${REDIS_PASSWORD_OPPFOLGINGSPLAN:}
      timeout: 2000
      lettuce:
        pool:
          max-active: 16
          min-idle: 8
          enabled: true
          time-between-eviction-runs: 10000
  cache:
    redis:
      time-to-live: 3600
      enable-statistics: true

management:
  endpoint:
    prometheus.enabled: true
    health.probes.enabled: true
    health.show-details: always
  endpoints.web:
    base-path: /internal
    exposure.include: health,prometheus
  health:
    livenessstate.enabled: true
    readinessState.enabled: true

logging.config: "classpath:logback.xml"

nais.cluster: ${NAIS_CLUSTER_NAME}

azure:
  app:
    client:
      id: "1345678"
      secret: "secret"
  openid:
    config:
      token:
        endpoint: "https://login.microsoftonline.com/id/oauth2/v2.0/token"

no.nav.security.jwt:
  issuer:
    internazureadv2:
      discoveryurl: ${azure.app.well.known.url}
      accepted_audience: ${azure.app.client.id}
    tokenx:
      discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
      accepted_audience: ${TOKEN_X_CLIENT_ID}
